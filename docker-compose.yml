version: '3.8'

services:
  # Web application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: piata_ro_web
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-piata-ro-secret-key-change-in-production}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0}
      - DB_NAME=${DB_NAME:-piata_ro}
      - DB_USER=${DB_USER:-piata_ro}
      - DB_PASSWORD=${DB_PASSWORD:-piata_ro_secure_password_2024}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-piata_ro_redis_password_2024}
      - REDIS_DB=0
      - MCP_SERVER_URL=http://mcp_server:8080
      - MCP_API_KEY=${MCP_API_KEY:-default_mcp_key}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - HUGGINGFACE_HUB_CACHE=/app/.cache/huggingface
      - TRANSFORMERS_CACHE=/app/.cache/transformers
    ports:
      - "${WEB_PORT:-8000}:8000"
    volumes:
      - ./:/app
      - static_volume:/app/static
      - media_volume:/app/media
      - ai_cache_volume:/app/.cache
    networks:
      - piata_ro_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL with pgvector for vector embeddings
  db:
    build:
      context: ./postgres-pgvector
      dockerfile: Dockerfile
    container_name: piata_ro_db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-piata_ro}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-piata_ro_secure_password_2024}
      POSTGRES_DB: ${DB_NAME:-piata_ro}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-piata_ro}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - piata_ro_network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: piata_ro_redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-piata_ro_redis_password_2024}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-piata_ro_redis_password_2024}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - piata_ro_network

  # MCP Server for AI capabilities
  mcp_server:
    image: ghcr.io/github/github-mcp-server:latest
    container_name: piata_ro_mcp
    restart: always
    environment:
      - MCP_API_KEY=${MCP_API_KEY:-default_mcp_key}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY:-}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT:-piata-ro-mcp-orchestrator}
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
    ports:
      - "${MCP_PORT:-8081}:8080"
    networks:
      - piata_ro_network

  # Nginx for serving static files and as a reverse proxy
  nginx:
    image: nginx:alpine
    container_name: piata_ro_nginx
    restart: always
    depends_on:
      - web
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/var/www/html/static
      - media_volume:/var/www/html/media
    networks:
      - piata_ro_network

  # Watchtower for automatic container updates
  watchtower:
    image: containrrr/watchtower
    container_name: piata_ro_watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 86400 --cleanup
    networks:
      - piata_ro_network

networks:
  piata_ro_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  ai_cache_volume: