name: 🏪 Piața RO CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Linting
  code-quality:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🎨 Check Code Formatting (Black)
        run: black --check --diff .

      - name: 📋 Check Import Sorting (isort)
        run: isort --check-only --diff .

      - name: 🔍 Lint with Flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: ⚡ Type Check with MyPy
        run: mypy . --ignore-missing-imports || true

      - name: 🛡️ Run Bandit Security Linter
        run: bandit -r . -f json -o bandit-report.json || true

      - name: 📋 Upload Bandit Report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-security-report
          path: bandit-report.json

  # Dependency Vulnerability Scanning
  security-scan:
    name: 🔐 Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Security Tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: 🔍 Check Dependencies for Vulnerabilities
        run: |
          if [ -f requirements.txt ]; then safety check -r requirements.txt -o safety-report.json; fi
          if [ -f requirements-prod.txt ]; then safety check -r requirements-prod.txt -o safety-report.json; fi

      - name: 📋 Upload Safety Report
        uses: actions/upload-artifact@v3
        with:
          name: safety-report
          path: safety-report.json

  # Docker Build and Test
  docker-build:
    name: 🐳 Docker Build and Test
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Backend Testing
  backend-tests:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-django factory-boy django-extensions
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-prod.txt ]; then pip install -r requirements-prod.txt; fi

      - name: 🔧 Configure Django Settings
        run: |
          cp piata_ro/settings.py piata_ro/settings.py.backup
          sed 's/DEBUG = True/DEBUG = False/' piata_ro/settings.py.backup > piata_ro/settings.py

      - name: 🧪 Run Backend Tests
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80 -v

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: 📋 Upload HTML Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  # Frontend Testing
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Node Dependencies
        run: npm ci

      - name: 🧪 Run Frontend Tests
        run: npm test || echo "No frontend tests configured yet"

      - name: 🏗️ Build Frontend
        run: npm run build || echo "No build script configured yet"

  # Database Migration Test
  migration-test:
    name: 🗄️ Database Migration Test
    runs-on: ubuntu-latest
    needs: [backend-tests]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install django psycopg2-binary
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🔧 Configure Django Settings
        run: |
          cp piata_ro/settings.py piata_ro/settings.py.backup
          sed 's/DEBUG = True/DEBUG = False/' piata_ro/settings.py.backup > piata_ro/settings.py
          sed 's|DATABASES = {.*}|DATABASES = {"default": {"ENGINE": "django.db.backends.postgresql", "NAME": "test_db", "USER": "test_user", "PASSWORD": "test_pass", "HOST": "localhost", "PORT": "5432"}}|' piata_ro/settings.py > piata_ro/settings.py.tmp && mv piata_ro/settings.py.tmp piata_ro/settings.py

      - name: 🧪 Test Migrations
        run: |
          python manage.py makemigrations --check --dry-run
          python manage.py migrate --check

  # Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, migration-test]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🟢 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install All Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-prod.txt ]; then pip install -r requirements-prod.txt; fi
          npm ci || echo "No package-lock.json found"

      - name: 🧪 Run Integration Tests
        run: |
          echo "Running integration tests..."
          python -m pytest tests/integration/ -v || echo "No integration tests found"

  # Performance Testing
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: [integration-tests]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install locust pytest-benchmark
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🧪 Run Performance Tests
        run: |
          locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 30s || echo "No performance tests found"

  # Deployment Preview (for PRs)
  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [code-quality, backend-tests, frontend-tests, security-scan, integration-tests]
    environment: preview
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Preview Environment
        run: |
          echo "Setting up preview environment for PR #${{ github.event.number }}"
          echo "Preview URL would be: https://piata-ro-pr-${{ github.event.number }}.preview.com"

      - name: 📝 Comment PR with Preview Link
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Preview Deployment Ready!**\n\n' +
                    '📱 Preview URL: `https://piata-ro-pr-${{ github.event.number }}.preview.com`\n' +
                    '🔧 Backend API: `https://api-piata-ro-pr-${{ github.event.number }}.preview.com`\n\n' +
                    '**Test Areas:**\n' +
                    '- [ ] User registration/login\n' +
                    '- [ ] Listing creation\n' +
                    '- [ ] Search functionality\n' +
                    '- [ ] Mobile responsiveness\n' +
                    '- [ ] Romanian localization\n\n' +
                    '_This preview will be available for 24 hours._'
            })

  # Production Deployment
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [code-quality, backend-tests, frontend-tests, security-scan, integration-tests, performance-test]
    environment: production
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📋 Update Deployment Status
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              description: 'Production deployment completed successfully'
            })

  # Notify on Success/Failure
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests, security-scan, integration-tests, performance-test]
    if: always()
    steps:
      - name: 📊 Check Results
        run: |
          echo "Pipeline Results:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-test.result }}"

      - name: 🎉 Success Notification
        if: ${{ needs.code-quality.result == 'success' && needs.backend-tests.result == 'success' && needs.security-scan.result == 'success' }}
        run: |
          echo "✅ All checks passed! Romanian marketplace is ready for deployment."

      - name: ❌ Failure Notification
        if: ${{ needs.code-quality.result == 'failure' || needs.backend-tests.result == 'failure' || needs.security-scan.result == 'failure' }}
        run: |
          echo "❌ Some checks failed. Please review the errors before merging."
