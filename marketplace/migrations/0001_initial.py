# Generated by Django 5.0.14 on 2025-09-20 05:21

import django.db.models.deletion
import django.utils.timezone
import marketplace.models
import marketplace.models_blog
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogNewsletterSubscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('subscribed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('interests', models.JSONField(default=list, help_text='List of interests/tags')),
            ],
            options={
                'verbose_name': 'Newsletter Subscriber',
                'verbose_name_plural': 'Newsletter Subscribers',
                'ordering': ['-subscribed_at'],
            },
        ),
        migrations.CreateModel(
            name='CreditPackage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('tier', models.CharField(choices=[('basic', 'Basic'), ('standard', 'Standard'), ('premium', 'Premium')], default='basic', max_length=20)),
                ('base_credits', models.DecimalField(decimal_places=1, max_digits=10)),
                ('bonus_credits', models.DecimalField(decimal_places=1, default=0, max_digits=10)),
                ('price_eur', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price_ron', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('stripe_price_id', models.CharField(blank=True, max_length=100, null=True)),
                ('referral_bonus', models.DecimalField(decimal_places=1, default=0, help_text='Bonus credits for both referrer and referee', max_digits=10)),
                ('expires_days', models.PositiveIntegerField(default=365, help_text='Days before purchased credits expire')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Credit Package',
                'verbose_name_plural': 'Credit Packages',
                'ordering': ['base_credits'],
            },
        ),
        migrations.CreateModel(
            name='PremiumPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('plan_type', models.CharField(choices=[('monthly', 'Monthly'), ('yearly', 'Yearly'), ('lifetime', 'Lifetime')], max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='RON', max_length=3)),
                ('credits_included', models.PositiveIntegerField(default=0)),
                ('max_premium_listings', models.PositiveIntegerField(default=5)),
                ('max_featured_listings', models.PositiveIntegerField(default=2)),
                ('priority_support', models.BooleanField(default=True)),
                ('analytics_access', models.BooleanField(default=True)),
                ('stripe_price_id', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('features', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['price'],
            },
        ),
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('meta_title', models.CharField(blank=True, max_length=60)),
                ('meta_description', models.TextField(blank=True, max_length=160)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('posts_count', models.PositiveIntegerField(default=0)),
                ('total_views', models.PositiveIntegerField(default=0)),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='marketplace.blogcategory')),
            ],
            options={
                'verbose_name': 'Blog Category',
                'verbose_name_plural': 'Blog Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BlogContentCalendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly')], default='weekly', max_length=20)),
                ('topics', models.JSONField(default=list, help_text='List of content topics')),
                ('publish_hour', models.PositiveIntegerField(default=9, help_text='Hour to publish (0-23)')),
                ('publish_day', models.PositiveIntegerField(default=0, help_text='Day of week (0=Monday, 6=Sunday)')),
                ('is_active', models.BooleanField(default=True)),
                ('last_published', models.DateTimeField(blank=True, null=True)),
                ('next_publish', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('categories', models.ManyToManyField(to='marketplace.blogcategory')),
            ],
            options={
                'verbose_name': 'Blog Content Calendar',
                'verbose_name_plural': 'Blog Content Calendars',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('excerpt', models.TextField(help_text='Brief summary for meta description and listings', max_length=300)),
                ('content', models.TextField()),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='blog/featured/%Y/%m/')),
                ('seo_title', models.CharField(blank=True, help_text='Leave empty to use title', max_length=60)),
                ('seo_description', models.TextField(blank=True, help_text='Meta description', max_length=160)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('scheduled', 'Scheduled')], default='draft', max_length=10)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('scheduled_for', models.DateTimeField(blank=True, null=True)),
                ('ai_generated', models.BooleanField(default=False)),
                ('ai_model_used', models.CharField(blank=True, max_length=50)),
                ('content_prompt', models.TextField(blank=True, help_text='The prompt used to generate this content')),
                ('views', models.PositiveIntegerField(default=0)),
                ('reading_time', models.PositiveIntegerField(default=0, help_text='Estimated reading time in minutes')),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('shares_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
                ('categories', models.ManyToManyField(related_name='posts', to='marketplace.blogcategory')),
            ],
            options={
                'verbose_name': 'Blog Post',
                'verbose_name_plural': 'Blog Posts',
                'ordering': ['-published_at', '-created_at'],
            },
            bases=(marketplace.models_blog.ModelMeta, models.Model),
        ),
        migrations.CreateModel(
            name='BlogComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=1000)),
                ('is_approved', models.BooleanField(default=True)),
                ('is_spam', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='marketplace.blogcomment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='marketplace.blogpost')),
            ],
            options={
                'verbose_name': 'Blog Comment',
                'verbose_name_plural': 'Blog Comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIBlogContentGenerator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=200)),
                ('target_audience', models.CharField(default='general', max_length=50)),
                ('keywords', models.JSONField(default=list)),
                ('word_count_target', models.PositiveIntegerField(default=1000)),
                ('tone', models.CharField(default='professional', max_length=50)),
                ('prompt_used', models.TextField()),
                ('ai_model', models.CharField(default='deepseek-chat', max_length=50)),
                ('generated_content', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('generating', 'Generating'), ('completed', 'Completed'), ('failed', 'Failed'), ('published', 'Published')], default='generating', max_length=10)),
                ('error_message', models.TextField(blank=True)),
                ('requested_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='marketplace.blogcategory')),
                ('blog_post', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_generation', to='marketplace.blogpost')),
            ],
            options={
                'verbose_name': 'AI Blog Content Generator',
                'verbose_name_plural': 'AI Blog Content Generators',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='BlogPostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='marketplace.blogpost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Blog Post Like',
                'verbose_name_plural': 'Blog Post Likes',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('color', models.CharField(blank=True, max_length=20, null=True)),
                ('embedding', models.TextField(blank=True, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='marketplace.category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ChatConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='New Conversation', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('response', models.TextField(blank=True)),
                ('is_user', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent_used', models.CharField(blank=True, max_length=50)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='marketplace.chatconversation')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='IdentityVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=10)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('scan_reference', models.CharField(blank=True, max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='identity_verification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Identity Verification',
                'verbose_name_plural': 'Identity Verifications',
            },
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('currency', models.CharField(choices=[('RON', 'Lei (RON)'), ('EUR', 'Euro (EUR)'), ('USD', 'Dolari (USD)')], default='RON', max_length=3)),
                ('location', models.CharField(max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('location_point', models.TextField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('county', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(default='România', max_length=100)),
                ('location_verified', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('sold', 'Sold'), ('expired', 'Expired'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_premium', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('views', models.PositiveIntegerField(default=0)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listings', to='marketplace.category')),
                ('subcategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategory_listings', to='marketplace.category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='marketplace.listing')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EscrowPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('created', 'Created'), ('funded', 'Funded'), ('released', 'Released'), ('refunded', 'Refunded'), ('disputed', 'Disputed'), ('resolved', 'Resolved')], default='created', max_length=10)),
                ('payment_intent_id', models.CharField(max_length=100)),
                ('dispute_reason', models.CharField(blank=True, choices=[('item_not_received', 'Item Not Received'), ('item_not_as_described', 'Item Not As Described'), ('unauthorized_transaction', 'Unauthorized Transaction'), ('other', 'Other')], max_length=25, null=True)),
                ('dispute_description', models.TextField(blank=True, null=True)),
                ('dispute_evidence', models.FileField(blank=True, null=True, upload_to='disputes/')),
                ('dispute_resolution', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='escrow_buys', to=settings.AUTH_USER_MODEL)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='escrow_sales', to=settings.AUTH_USER_MODEL)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='marketplace.listing')),
            ],
            options={
                'verbose_name': 'Escrow Payment',
                'verbose_name_plural': 'Escrow Payments',
            },
        ),
        migrations.CreateModel(
            name='CreditTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('purchase', 'Purchase'), ('spent', 'Spent'), ('bonus', 'Bonus'), ('refund', 'Refund')], max_length=20)),
                ('amount', models.IntegerField()),
                ('description', models.CharField(max_length=255)),
                ('payment_intent_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credit_transactions', to=settings.AUTH_USER_MODEL)),
                ('listing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='marketplace.listing')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ListingImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=marketplace.models.listing_image_path)),
                ('is_main', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='marketplace.listing')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ListingReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('spam', 'Spam sau anunț duplicat'), ('inappropriate', 'Conținut nepotrivit'), ('fake', 'Anunț fals'), ('price', 'Preț incorect sau înșelător'), ('contact', 'Informații de contact false'), ('copyright', 'Încălcarea drepturilor de autor'), ('other', 'Altul')], max_length=20)),
                ('comment', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'În așteptare'), ('reviewed', 'Revizuit'), ('resolved', 'Rezolvat'), ('dismissed', 'Respins')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Admin notes', null=True)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listing_reports', to='marketplace.listing')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_reports', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('latitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(max_length=100)),
                ('county', models.CharField(max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(default='România', max_length=100)),
                ('location_type', models.CharField(choices=[('city', 'City'), ('neighborhood', 'Neighborhood'), ('landmark', 'Landmark'), ('custom', 'Custom Location')], default='city', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['city', 'county'], name='marketplace_city_d5a0b8_idx'), models.Index(fields=['latitude', 'longitude'], name='marketplace_latitud_1f45c2_idx')],
                'unique_together': {('latitude', 'longitude')},
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('listing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='marketplace.listing')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('payment_type', models.CharField(choices=[('credits', 'Credits Purchase'), ('premium', 'Premium Subscription'), ('listing_boost', 'Listing Boost')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='RON', max_length=3)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('succeeded', 'Succeeded'), ('failed', 'Failed'), ('canceled', 'Canceled'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('stripe_payment_intent_id', models.CharField(max_length=100, unique=True)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=100, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ListingBoost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('boost_type', models.CharField(choices=[('featured', 'Featured Listing'), ('top_ad', 'Top Ad'), ('highlighted', 'Highlighted'), ('urgent', 'Urgent')], max_length=20)),
                ('credits_cost', models.PositiveIntegerField()),
                ('duration_days', models.PositiveIntegerField()),
                ('starts_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('auto_repost', models.BooleanField(default=False)),
                ('auto_repost_interval', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boosts', to='marketplace.listing')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='marketplace.payment')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('spam', 'Spam or misleading'), ('fraud', 'Fraud or scam'), ('prohibited', 'Prohibited item'), ('wrong_category', 'Wrong category'), ('duplicate', 'Duplicate listing'), ('other', 'Other reason')], max_length=20)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='marketplace.listing')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_made', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Listing Report',
                'verbose_name_plural': 'Listing Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_views', models.PositiveIntegerField(default=0)),
                ('total_messages', models.PositiveIntegerField(default=0)),
                ('total_favorites', models.PositiveIntegerField(default=0)),
                ('total_listings', models.PositiveIntegerField(default=0)),
                ('total_sales', models.PositiveIntegerField(default=0)),
                ('conversion_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('monthly_data', models.JSONField(default=dict)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.CharField(blank=True, max_length=255, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('is_premium', models.BooleanField(default=False)),
                ('premium_until', models.DateTimeField(blank=True, null=True)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=100, null=True)),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=100, null=True)),
                ('credits_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('total_credits_purchased', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('mfa_enabled', models.BooleanField(default=False)),
                ('mfa_secret', models.CharField(blank=True, max_length=32, null=True)),
                ('mfa_backup_codes', models.JSONField(blank=True, default=list)),
                ('last_mfa_used', models.DateTimeField(blank=True, null=True)),
                ('last_password_change', models.DateTimeField(auto_now_add=True)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='blogpost',
            index=models.Index(fields=['status', '-published_at'], name='marketplace_status_663b95_idx'),
        ),
        migrations.AddIndex(
            model_name='blogpost',
            index=models.Index(fields=['author', 'status'], name='marketplace_author__ab2139_idx'),
        ),
        migrations.AddIndex(
            model_name='blogpost',
            index=models.Index(fields=['-published_at', 'status'], name='marketplace_publish_fb0037_idx'),
        ),
        migrations.AddIndex(
            model_name='blogpost',
            index=models.Index(fields=['views', 'status'], name='marketplace_views_9c0975_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='blogpostlike',
            unique_together={('post', 'user')},
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['status', 'created_at'], name='marketplace_status_5c3116_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['category', 'status'], name='marketplace_categor_aa423d_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['user', 'status'], name='marketplace_user_id_e7108c_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['is_featured', 'created_at'], name='marketplace_is_feat_292243_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['price', 'status'], name='marketplace_price_ad1561_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['city', 'status'], name='marketplace_city_2ea38b_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['latitude', 'longitude'], name='marketplace_latitud_b0088f_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['is_premium', 'status', 'created_at'], name='marketplace_is_prem_50643d_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['is_verified', 'status'], name='marketplace_is_veri_c666fb_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['county', 'city', 'status'], name='marketplace_county_96d91b_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['created_at', 'status'], name='marketplace_created_c7b376_idx'),
        ),
        migrations.AddIndex(
            model_name='listing',
            index=models.Index(fields=['views', 'status'], name='marketplace_views_e53f9d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='favorite',
            unique_together={('user', 'listing')},
        ),
        migrations.AlterUniqueTogether(
            name='listingreport',
            unique_together={('listing', 'reporter')},
        ),
    ]
